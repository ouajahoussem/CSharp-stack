// <auto-generated />
using System;
using BeltExam.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeltExam.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240428173543_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BeltExam.Models.Rate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RateId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("BeltExam.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("GlutenFree")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IngredientFive")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IngredientFour")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IngredientOne")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IngredientThree")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IngredientTwo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Introductions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("BeltExam.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAT")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BeltExam.Models.Rate", b =>
                {
                    b.HasOne("BeltExam.Models.Recipe", "RecipeRatings")
                        .WithMany("UserWhoRated")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeltExam.Models.User", "UserRating")
                        .WithMany("RecipesRated")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeRatings");

                    b.Navigation("UserRating");
                });

            modelBuilder.Entity("BeltExam.Models.Recipe", b =>
                {
                    b.HasOne("BeltExam.Models.User", "Reciper")
                        .WithMany("RecipesMaked")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciper");
                });

            modelBuilder.Entity("BeltExam.Models.Recipe", b =>
                {
                    b.Navigation("UserWhoRated");
                });

            modelBuilder.Entity("BeltExam.Models.User", b =>
                {
                    b.Navigation("RecipesMaked");

                    b.Navigation("RecipesRated");
                });
#pragma warning restore 612, 618
        }
    }
}
